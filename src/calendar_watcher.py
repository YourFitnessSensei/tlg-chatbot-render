import asyncio
import logging
import os
import json
from datetime import datetime
from dateutil import parser
from googleapiclient.discovery import build
from google.oauth2.service_account import Credentials
from datetime import datetime, timezone

from user_store import load_user_map

logger = logging.getLogger(__name__)
SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']

CALENDAR_IDS = [
    "feda623f7ff64223e61e023a56d72fb82c8741e7e58fea9696449c9d37073a90@group.calendar.google.com",
    "b8f68c9a9a6109f84e95071f4359e3d6afd261fcd3811fecaa0b81ba87ab0e3d@group.calendar.google.com"
]

NOTIFIED_EVENTS_FILE = "notified_events.json"

RUS_MONTHS = {
    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
    5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
    9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
}


def get_calendar_service():
    creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
    if not creds_json:
        raise RuntimeError("GOOGLE_CREDENTIALS_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    creds_info = json.loads(creds_json)
    credentials = Credentials.from_service_account_info(creds_info, scopes=SCOPES)
    return build('calendar', 'v3', credentials=credentials)

def find_next_event_for_user(username: str):
    service = get_calendar_service()
    now = datetime.utcnow().replace(tzinfo=timezone.utc).isoformat()
    
    for calendar_id in CALENDAR_IDS:
        try:
            events_result = service.events().list(
                calendarId=calendar_id,
                timeMin=now,
                maxResults=50,
                singleEvents=True,
                orderBy='startTime'
            ).execute()

            events = events_result.get("items", [])
            for event in events:
                summary = event.get("summary", "")
                if username.lower() in summary.lower():
                    start_raw = event["start"].get("dateTime", event["start"].get("date"))
                    start_dt = parser.parse(start_raw)
                    day = start_dt.day
                    month = RUS_MONTHS[start_dt.month]
                    year = start_dt.year
                    time_str = start_dt.strftime("%H:%M")

                    return (
                        f"üèãÔ∏è –°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, {summary}\n"
                        f"üóì {day} {month} {year}\n"
                        f"‚è∞ –í {time_str} –ø–æ –ú–æ—Å–∫–≤–µ"
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ {calendar_id}: {e}")
    
    return "üîç –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

def load_notified_event_ids():
    if os.path.exists(NOTIFIED_EVENTS_FILE):
        with open(NOTIFIED_EVENTS_FILE, "r") as f:
            return set(json.load(f))
    return set()


def save_notified_event_ids(event_ids):
    with open(NOTIFIED_EVENTS_FILE, "w") as f:
        json.dump(list(event_ids), f)


from datetime import datetime, timezone, timedelta
from dateutil import parser
from pytz import timezone as pytz_timezone

MOSCOW_TZ = pytz_timezone("Europe/Moscow")

async def check_and_notify(bot):
    service = get_calendar_service()
    now = datetime.utcnow().replace(tzinfo=timezone.utc)
    user_map = load_user_map()
    notified_event_ids = load_notified_event_ids()

    for calendar_id in CALENDAR_IDS:
        try:
            events_result = service.events().list(
                calendarId=calendar_id,
                timeMin=now.isoformat(),
                maxResults=10,
                singleEvents=True,
                orderBy='startTime'
            ).execute()

            events = events_result.get('items', [])

            for event in events:
                event_id = event.get('id')
                if not event_id:
                    continue  # –ë–µ–∑ id –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å 24—á –∏ 1—á)
                # –ú–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∫–æ—Ä—Ç–µ–∂–∏ (event_id, reminder_type) –≤ notified_event_ids,
                # —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∑–¥–µ—Å—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ event_id, –Ω–æ –º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å

                summary = event.get("summary", "")
                matched_chat_id = None

                for username, chat_id in user_map.items():
                    if username.lower() in summary.lower():
                        matched_chat_id = chat_id
                        break

                if not matched_chat_id:
                    continue

                start_raw = event['start'].get('dateTime', event['start'].get('date'))
                start_dt = parser.parse(start_raw).astimezone(timezone.utc)
                start_dt_moscow = start_dt.astimezone(MOSCOW_TZ)

                time_until_event = start_dt - now

                day = start_dt_moscow.day
                month = RUS_MONTHS[start_dt_moscow.month]
                year = start_dt_moscow.year
                time_str = start_dt_moscow.strftime("%H:%M")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞
                if timedelta(hours=23, minutes=30) < time_until_event < timedelta(hours=24, minutes=30):
                    reminder_24h_id = f"{event_id}_24h"
                    if reminder_24h_id not in notified_event_ids:
                        message_24h = (
                            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ó–∞–≤—Ç—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {summary}\n"
                            f"üóì {day} {month} {year}\n"
                            f"‚è∞ –í {time_str} –ø–æ –ú–æ—Å–∫–≤–µ"
                        )
                        try:
                            await bot.application.bot.send_message(chat_id=matched_chat_id, text=message_24h)
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 24—á —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {matched_chat_id}")
                            notified_event_ids.add(reminder_24h_id)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ 24—á –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 —á–∞—Å
                elif timedelta(minutes=50) < time_until_event < timedelta(hours=1, minutes=10):
                    reminder_1h_id = f"{event_id}_1h"
                    if reminder_1h_id not in notified_event_ids:
                        message_1h = (
                            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ß–µ—Ä–µ–∑ —á–∞—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {summary}\n"
                            f"üóì {day} {month} {year}\n"
                            f"‚è∞ –í {time_str} –ø–æ –ú–æ—Å–∫–≤–µ"
                        )
                        try:
                            await bot.application.bot.send_message(chat_id=matched_chat_id, text=message_1h)
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 1—á —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {matched_chat_id}")
                            notified_event_ids.add(reminder_1h_id)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ 1—á –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∞–º–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ:
                # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è, —á—Ç–æ–±—ã –±–æ—Ç –Ω–∞–ø–æ–º–Ω–∏–ª –∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ —Å–æ–±—ã—Ç–∏–µ,
                # –µ—Å–ª–∏ —Ä–∞–Ω—å—à–µ –Ω–µ –Ω–∞–ø–æ–º–Ω–∏–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è {calendar_id}: {e}")

    save_notified_event_ids(notified_event_ids)


async def watch_calendar_loop(bot, interval_seconds=60):
    while True:
        await check_and_notify(bot)
        await asyncio.sleep(interval_seconds)

